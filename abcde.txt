1}selection sort

#include<bits/stdc++.h>
using namespace std;
int a[100];
int main()
{
    int n,i,j,min=0;
    cout<<"Enter number of elements :";
    cin>>n;
    cout<<"Emter the elements :";
    for(i=0;i<n;i++)
    cin>>a[i];

    for(i=0;i<n-2;i++)
    {
        min=i;
        for(j=i+1;j<n;j++)
        {
            if(a[j]<a[min])
            min=j;
        }
        swap(a[i],a[min]);
    }

    cout<<"Array after sorting :";
    for(i=0;i<n;i++)
    cout<<a[i]<<"\t";
    return 0;
}
-----------------------------------------------------------------------------
2}string matching

#include<bits/stdc++.h>
using namespace std;

int main()
{
    int i,j,m,n,flag=0;
    char text[100],pattern[20];
    cout<<"Enter text : ";
    cin>>text;
    cout<<"Enter pattern : ";
    cin>>pattern;
    m=strlen(pattern);
    n=strlen(text);
    for(i=0;i<n-m;i++)
    {
        j=0;
        while(j<m && pattern[j]==text[i+j])
        j++;
        if(j==m)
        {
            cout<<"Pattern found at position "<<i;
            flag=1;
        }
    }
    if(flag==0)
    cout<<"Pattern not found";
    return 0;
}
-----------------------------------------------------------------------------
3}merge sort

#include<bits/stdc++.h>
using namespace std;

void merge(int a[],int low,int mid,int high)
{
    int i=low,j=mid+1,k=low;
    int temp[100];
    while(i<=mid && j<=high)
    {
    if(a[i]<=a[j])
    {
        temp[k]=a[i];
        k++;
        i++;
    }
    else
    {
        temp[k]=a[j];
        j++;
        k++;
    }
    }
    while(i<=mid)
    {
        temp[k]=a[i];
        k++;
        i++;
    }
    while(j<=high)
    {
        temp[k]=a[j];
        j++;
        k++;
    }
    for(i=low;i<=high;i++)
    a[i]=temp[i];
}

void merge_sort(int a[],int low ,int high)
{
    if(low<high)
    {
        int mid=(low+high)/2;
        merge_sort(a,low,mid);
        merge_sort(a,mid+1,high);
        merge(a,low,mid,high);
    }
}

int main()
{
    int i,n;
    cout<<"Enter number of elements :";
    cin>>n;
    int a[n];
    cout<<"Enter the elements :";
    for(i=0;i<n;i++)
    cin>>a[i];
    merge_sort(a,0,n-1);
    cout<<"\nArray after sorting :";
    for(i=0;i<n;i++)
    cout<<"\t"<<a[i];
    return 0;
}

-----------------------------------------------------------------------------
4}quick sort

#include<bits/stdc++.h>
using namespace std;

int partition(int a[],int low,int high)
{
    int pivot=a[low];
    int i=low+1,j=high;
    while(i<=j)
    {
        if(a[i]<pivot)
        i++;
        if(a[j]>pivot)
        j--;
         if(i<=j)
    swap(a[i],a[j]);
    }
   swap(a[j],a[low]);
   return j;
}

void quick_sort(int a[],int low,int high)
{
    if(low<high)
    {
        int p=partition(a,low,high);
        quick_sort(a,low,p);
        quick_sort(a,p+1,high);
    }
}

int main()
{
    int i,n;
    cout<<"Enter number of elements :";
    cin>>n;
    int a[n];
    cout<<"Enter the elements :";
    for(i=0;i<n;i++)
    cin>>a[i];
    quick_sort(a,0,n-1);
    cout<<"\nArray after sorting :";
    for(i=0;i<n;i++)
    cout<<"\t"<<a[i];
    return 0;
}
------------------------------------------------------------------------
5}prims

#include<bits/stdc++.h>
using namespace std;
#define V 6

int find_minKEY(vector<int>& value, vector<bool>& mst_set)
{
    int min=INT_MAX;
    int vertex;
    for(int i=0;i<V;i++)
    if(mst_set[i]==false && value[i]<min)
    {
        vertex=i;
        min=value[i];
    }
    return vertex;
}

void find_mst(int graph[V][V])
{
    int parent[V];
    vector<int> value(V,INT_MAX);
    vector<bool> set_mst(V,false);
    parent[0]=-1;
    value[0]=0;
    for(int i=0;i<V-1;++i)
    {
        int u=find_minKEY(value,set_mst);
        set_mst[u]=true;
        for(int j=0;j<V;++j)
        {
            if(graph[u][j]!=0 && set_mst[j]==false && graph[u][j]<value[j])
            {
                parent[j]=u;
                value[j]=graph[u][j];
            }
        }
    }
    for(int i=1;i<V;i++)
    cout<<parent[i]<<"->"<<i<<"  wt="<<graph[parent[i]][i]<<endl;
}

int main()
{
	int graph[V][V];
    cout<<"Enter graph with "<<V<<" vertices\n";
    for(int i=0;i<V;i++)
    for(int j=0;j<V;j++)
    cin>>graph[i][j];
	find_mst(graph);	
	return 0;
}
-------------------------------------------------------------------------
6}kruskals

#include<bits/stdc++.h>
using namespace std;
int ne=1,min_cost=0;

int main()
{
    int n,i,j,a,b,u,v,min,cost[20][20],parent[20];
    cout<<"Enter Number of vertices :";
    cin>>n;
    cout<<"Enter the cost matrix \n";
    for(i=1;i<=n;i++)
    for(j=1;j<=n;j++)
    cin>>cost[i][j];
    for(i=1;i<=n;i++)
    parent[i]=0;
    cout<<"The edges of spanning tree are \n";
    while(ne<n)
    {
        min=999;
        for(i=1;i<=n;i++)
        for(j=1;j<=n;j++)
        if(cost[i][j]<min)
        {
            min=cost[i][j];
            a=u=i;
            b=v=j;
        }
        while(parent[u])
        u=parent[u];
        while(parent[v])
        v=parent[v];
        if(u!=v)
        {
            cout<<a<<"->"<<b<<" = "<<min<<endl;
            min_cost=min_cost+min;
            parent[v]=u;
            ne++;
        }
        cost[a][b]=cost[b][a]=999;
    }
    cout<<"Minimum cost = "<<min_cost;
    return 0;
}
---------------------------------------------------
7}bfs
#include<bits/stdc++.h>
using namespace std;

void bfs(int [20][20],int,int[20],int);

int main()
{
    int n,a[20][20],i,j,visited[20],source;
    cout<<"Enter number of vertices :";
    cin>>n;
    cout<<"Enter adjecency matrix :\n";
    for( i=1;i<=n;i++)
    for( j=1;j<=n;j++)
    cin>>a[i][j];
    for(i=1;i<=n;i++)
    visited[i]=0;
    cout<<"Enter source node :";
    cin>>source;
    visited[source]=1;
    bfs(a,source,visited,n);
    for(i=1;i<=n;i++)
    if(visited[i]==0) 
    cout<<"node "<<i<<" is not reachable\n";   
    else
    cout<<"node "<<i<<" is  reachable\n"; 
    return 0;
}

void bfs(int a[20][20],int source,int visited[20],int n)
{
    int q[20],f,r,u,v;
    f=0;
    r=-1;
    q[++r]=source;
    while(f<=r)
    {
        u=q[f++];
        for(v=1;v<=n;v++)
        if(a[u][v]==1 && visited[v]==0)
        {
            q[++r]=v;
            visited[v]=1;
        }
    }
}
----------------------------------------------------------------
8}dfs

//check the connectivity of the graph using dfs
#include<bits/stdc++.h>
using namespace std;
 int a[20][20],visited[20],n;
void dfs(int);
int main()
{
    int x=1;
  //  int a[20][20],source,visited[20],n;
    cout<<"Enter number of vertices :";
    cin>>n;
    cout<<"Enter adjecency matrix\n";
    for(int i=0;i<n;i++)
    for(int j=0;j<n;j++)
    cin>>a[i][j];
    for(int i=0;i<n;i++)
    visited[i]=0;
    dfs(0);
    for(int i=0;i<n;i++)
    if(visited[i]==0)
     x=0;
     if(x==0)
    cout<<"Graph is not connected";
    else
    cout<<"graph is  connected";
    return 0;
}

void dfs(int v)
{
   int i;
   visited[v]=1;
   for(i=0;i<n;i++)
   if(a[v][i]==1 && visited[i]==0)
   dfs(i);
}
-------------------------------------------------------------------------
9}heapsort

#include<bits/stdc++.h>
using namespace std;

int a[100];
void heapify(int , int);

int main()
{
    int i,n;
    cout<<"Enter number of elements :";
    cin>>n;
    cout<<"Enter the elements to be sorted :";
    for(i=0;i<n;i++)
    cin>>a[i];
    for(i=n/2;i>=0;i--)
    heapify(i,n);
    for(i=n-1;i>=0;i--)
    {
        swap(a[0],a[i]);
        heapify(0,i);
    }
    cout<<"sorted array :";
     for(i=0;i<n;i++)
    cout<<a[i]<<"\t";   
    return 0;
}

void heapify(int i , int n)
{
    int largest=i;
    int left=(2*i)+1;
    int right=(2*i)+2;
    if(left<n && a[largest]<a[left])
    largest=left;
    if(right<n && a[largest]<a[right])
    largest=right;
    if(largest!=i)
    {
        swap(a[i],a[largest]);
        heapify(largest,n);
    }
}

------------------------------------------------------------------------------------
10}horspool

#include<bits/stdc++.h>
using namespace std;

int table[256];

int *ShiftTable(char p[])
{
    int m=strlen(p);
    for(int i=0;i<256;i++)
      table[i]=m;
    for(int j=0;j<=m-2;j++)
      table[p[j]]=m-1-j;  
    return table;
}

int horspool(char p[], char t[])
{
    int m,n,i,k;
    m=strlen(p);
    n=strlen(t);
    ShiftTable(p);
    i=m-1;
    while(i<=n-1)
    {
        k=0;
        while(k<=m-1 && p[m-1-k]==t[i-k])
        k++;
        if(k==m)
        return (i-m+2);
        else
        i=i+table[t[i]];
    }
    cout<<endl<<m<<endl<<k;
    return -1;
}

int main()
{
    char text[100],pattern[20];
    cout<<"Enter text : ";
    cin>>text;
    cout<<"Enter pattern : ";
    cin>>pattern;
    int pos=horspool(pattern,text);
    if(pos==-1)
    cout<<"\nPattern not found ";
    else
    cout<<"\nPattern found at position "<<pos; 

    cout<<endl<<pos;
    return 0;
}
-----------------------------------------------------------------------
11}floyds

#include<bits/stdc++.h>
using namespace std;

void floyds();
int a[10][10],n;
int min(int , int);

int main()
{
    int i , j;
    cout<<"Enter number of vertices :";
    cin>>n;
    cout<<"Enter the cost matrix :\n";
    for(i=1;i<=n;i++)
    for(j=1;j<=n;j++)
    cin>>a[i][j];
    floyds();
    return 0;
}

void floyds()
{
    int i,j,k;
    for(k=1;k<=n;k++)
    for(i=1;i<=n;i++)
    for(j=1;j<=n;j++)
    a[i][j]=min(a[i][j],a[i][k]+a[k][j]);
    cout<<"\nAll pairs shortest matrix is : \n";
    for(i=1;i<=n;i++)
    {
    for(j=1;j<=n;j++)
    cout<<a[i][j]<<"\t";
    cout<<"\n";
    }    
}

int min(int x,int y)
{
    if(x<y)
    return x;
    else
    return y;
}
-------------------------------------------------------------------------------
12}knapsack
#include<bits/stdc++.h>
using namespace std;

#define MAX 50
int p[MAX] , w[MAX] , n ;
int knapsack(int , int);
int max(int , int);

int main()
{
    int i,m,x;
    cout<<"Enter number of items :";
    cin>>n;
    cout<<"Enter weights :";
    for(i=1;i<=n;i++)
    cin>>w[i];
    cout<<"Enter the profits :";
    for(i=1;i<=n;i++)
    cin>>p[i];
    cout<<"Enter knapsack capacity :";
    cin>>m;
    x=knapsack(1,m);
    cout<<"Optimal Solution = "<<x;
    return 0;
}

int knapsack(int i , int m)
{
    if(i==n)
    return (w[n]>m)?0:p[n];
    if(m<w[i])
    return knapsack(i+1,m);
    return max(knapsack(i+1,m) , knapsack(i+1,m-w[i])+p[i]);
}

int max(int a,int b)
{
if(a>b)
return a;
else
return b;
}





